{"/home/travis/build/npmtest/node-npmtest-imagemin-webpack-plugin/test.js":"/* istanbul instrument in package npmtest_imagemin_webpack_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-imagemin-webpack-plugin/lib.npmtest_imagemin_webpack_plugin.js":"/* istanbul instrument in package npmtest_imagemin_webpack_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_imagemin_webpack_plugin = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_imagemin_webpack_plugin = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-imagemin-webpack-plugin/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-imagemin-webpack-plugin && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_imagemin_webpack_plugin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_imagemin_webpack_plugin\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_imagemin_webpack_plugin.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_imagemin_webpack_plugin.rollup.js'] =\n            local.assetsDict['/assets.npmtest_imagemin_webpack_plugin.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_imagemin_webpack_plugin.__dirname + '/lib.npmtest_imagemin_webpack_plugin.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-imagemin-webpack-plugin/node_modules/imagemin-webpack-plugin/index.es5.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getIterator2 = require('babel-runtime/core-js/get-iterator');\n\nvar _getIterator3 = _interopRequireDefault(_getIterator2);\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _promise = require('babel-runtime/core-js/promise');\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nvar _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');\n\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\n/**\n * Optimizes a single image asset, returning the orignal if the \"optimized\" version is larger\n * @param  {Object}  asset\n * @param  {Object}  imageminOptions\n * @return {Promise(asset)}\n */\nvar optimizeImage = function () {\n  var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(asset, imageminOptions) {\n    var assetSource, assetOrigSize, assetContents, optimizedAssetContents;\n    return _regenerator2.default.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            // Grab the orig source and size\n            assetSource = asset.source();\n            assetOrigSize = asset.size();\n\n            // Ensure that the contents i have are in the form of a buffer\n\n            assetContents = Buffer.isBuffer(assetSource) ? assetSource : new Buffer(assetSource, 'utf8');\n\n            // Await for imagemin to do the compression\n\n            _context3.next = 5;\n            return _imagemin2.default.buffer(assetContents, imageminOptions);\n\n          case 5:\n            optimizedAssetContents = _context3.sent;\n\n            if (!(optimizedAssetContents.length < assetOrigSize)) {\n              _context3.next = 10;\n              break;\n            }\n\n            return _context3.abrupt('return', new _RawSource2.default(optimizedAssetContents));\n\n          case 10:\n            return _context3.abrupt('return', asset);\n\n          case 11:\n          case 'end':\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n\n  return function optimizeImage(_x4, _x5) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\n/**\n * Tests a filename to see if it matches any of the given test globs/regexes\n * @param  {String} filename\n * @param  {Array} regexes\n * @return {Boolean}\n */\n\n\nvar _lodash = require('lodash.map');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _RawSource = require('webpack-sources/lib/RawSource');\n\nvar _RawSource2 = _interopRequireDefault(_RawSource);\n\nvar _imagemin = require('imagemin');\n\nvar _imagemin2 = _interopRequireDefault(_imagemin);\n\nvar _imageminPngquant = require('imagemin-pngquant');\n\nvar _imageminPngquant2 = _interopRequireDefault(_imageminPngquant);\n\nvar _imageminOptipng = require('imagemin-optipng');\n\nvar _imageminOptipng2 = _interopRequireDefault(_imageminOptipng);\n\nvar _imageminGifsicle = require('imagemin-gifsicle');\n\nvar _imageminGifsicle2 = _interopRequireDefault(_imageminGifsicle);\n\nvar _imageminJpegtran = require('imagemin-jpegtran');\n\nvar _imageminJpegtran2 = _interopRequireDefault(_imageminJpegtran);\n\nvar _imageminSvgo = require('imagemin-svgo');\n\nvar _imageminSvgo2 = _interopRequireDefault(_imageminSvgo);\n\nvar _os = require('os');\n\nvar _asyncThrottle = require('async-throttle');\n\nvar _asyncThrottle2 = _interopRequireDefault(_asyncThrottle);\n\nvar _minimatch = require('minimatch');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ImageminPlugin = function () {\n  function ImageminPlugin() {\n    var _options$imageminOpti;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    (0, _classCallCheck3.default)(this, ImageminPlugin);\n\n    // I love ES2015!\n    var _options$disable = options.disable,\n        disable = _options$disable === undefined ? false : _options$disable,\n        _options$test = options.test,\n        test = _options$test === undefined ? /.*/ : _options$test,\n        _options$maxConcurren = options.maxConcurrency,\n        maxConcurrency = _options$maxConcurren === undefined ? (0, _os.cpus)().length : _options$maxConcurren,\n        _options$plugins = options.plugins,\n        plugins = _options$plugins === undefined ? [] : _options$plugins,\n        _options$optipng = options.optipng,\n        optipng = _options$optipng === undefined ? {\n      optimizationLevel: 3\n    } : _options$optipng,\n        _options$gifsicle = options.gifsicle,\n        gifsicle = _options$gifsicle === undefined ? {\n      optimizationLevel: 1\n    } : _options$gifsicle,\n        _options$jpegtran = options.jpegtran,\n        jpegtran = _options$jpegtran === undefined ? {\n      progressive: false\n    } : _options$jpegtran,\n        _options$svgo = options.svgo,\n        svgo = _options$svgo === undefined ? {} : _options$svgo,\n        _options$pngquant = options.pngquant,\n        pngquant = _options$pngquant === undefined ? null : _options$pngquant;\n\n\n    this.options = {\n      disable,\n      maxConcurrency,\n      imageminOptions: {\n        plugins: []\n      },\n      testRegexes: compileTestOption(test)\n    };\n\n    // As long as the options aren't `null` then include the plugin. Let the destructuring above\n    // control whether the plugin is included by default or not.\n    var _arr = [[_imageminOptipng2.default, optipng], [_imageminGifsicle2.default, gifsicle], [_imageminJpegtran2.default, jpegtran], [_imageminSvgo2.default, svgo], [_imageminPngquant2.default, pngquant]];\n    for (var _i = 0; _i < _arr.length; _i++) {\n      var _ref = _arr[_i];\n\n      var _ref2 = (0, _slicedToArray3.default)(_ref, 2);\n\n      var plugin = _ref2[0];\n      var pluginOptions = _ref2[1];\n\n      if (pluginOptions !== null) {\n        this.options.imageminOptions.plugins.push(plugin(pluginOptions));\n      }\n    }\n\n    // And finally, add any plugins that they pass in the options to the internal plugins array\n    (_options$imageminOpti = this.options.imageminOptions.plugins).push.apply(_options$imageminOpti, (0, _toConsumableArray3.default)(plugins));\n  }\n\n  (0, _createClass3.default)(ImageminPlugin, [{\n    key: 'apply',\n    value: function apply(compiler) {\n      var _this = this;\n\n      // If disabled, short-circuit here and just return\n      if (this.options.disable === true) return null;\n\n      // Pull out the regex test\n      var testRegexes = this.options.testRegexes;\n\n      // Access the assets once they have been assembled\n      compiler.plugin('emit', function () {\n        var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(compilation, callback) {\n          var throttle;\n          return _regenerator2.default.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  throttle = (0, _asyncThrottle2.default)(_this.options.maxConcurrency);\n                  _context2.prev = 1;\n                  _context2.next = 4;\n                  return _promise2.default.all((0, _lodash2.default)(compilation.assets, function (asset, filename) {\n                    return throttle((0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {\n                      return _regenerator2.default.wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              if (!testFile(filename, testRegexes)) {\n                                _context.next = 4;\n                                break;\n                              }\n\n                              _context.next = 3;\n                              return optimizeImage(asset, _this.options.imageminOptions);\n\n                            case 3:\n                              compilation.assets[filename] = _context.sent;\n\n                            case 4:\n                            case 'end':\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee, _this);\n                    })));\n                  }));\n\n                case 4:\n\n                  // At this point everything is done, so call the callback without anything in it\n                  callback();\n                  _context2.next = 10;\n                  break;\n\n                case 7:\n                  _context2.prev = 7;\n                  _context2.t0 = _context2['catch'](1);\n\n                  callback(_context2.t0);\n\n                case 10:\n                case 'end':\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, _this, [[1, 7]]);\n        }));\n\n        return function (_x2, _x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    }\n  }]);\n  return ImageminPlugin;\n}();\n\nexports.default = ImageminPlugin;\nfunction testFile(filename, regexes) {\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = (0, _getIterator3.default)(regexes), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var regex = _step.value;\n\n      if (regex.test(filename)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return false;\n}\n\n/**\n * Compiles a regex, glob, or an array of globs to a single regex for testing later\n * @param  {RegExp|String|String[]} rawTestValue\n * @return {RegExp}\n */\nfunction compileTestOption(rawTestValue) {\n  var tests = Array.isArray(rawTestValue) ? rawTestValue : [rawTestValue];\n\n  return tests.map(function (test) {\n    if (test instanceof RegExp) {\n      // If it's a regex, just return it\n      return test;\n    } else if (typeof test === 'string') {\n      // If it's a string, let minimatch convert it to a regex\n      return (0, _minimatch.makeRe)(test);\n    } else {\n      throw new Error('test parameter must be a regex, glob string, or an array of regexes or glob strings');\n    }\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-imagemin-webpack-plugin/node_modules/imagemin-webpack-plugin/gulpfile.babel.js":"import gulp from 'gulp'\nimport { resolve } from 'path'\nimport run from 'gulp-run-command'\nimport sync from 'gulp-npm-script-sync'\n\nconst SOURCEFILE = resolve('.', 'index.js')\nconst OUTFILE = resolve('.', 'index.es5.js')\n\ngulp.task('clean', run(`rimraf ${OUTFILE}`))\ngulp.task('test', run('standard ./index.js'))\ngulp.task('build', ['clean'], run(`babel ${SOURCEFILE} --out-file ${OUTFILE}`))\n\nsync(gulp)\n"}